@inject IJSRuntime JSRuntime
<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">BestPathUI</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @*<li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>*@
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="map">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Map
            </NavLink>
            <NavLink class="nav-link" href="login">
                <span class="oi oi-list-rich" aria-hidden="true"></span>@AuthenticationButtonText
            </NavLink>
        </li>
    </ul>
</div>

@code {
    bool collapseNavMenu = true;
    string AuthenticationButtonText = "Login";
    bool AuthenticationTextSet = false;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!AuthenticationTextSet)
        {
            string localToken = await JSRuntime.InvokeAsync<string>("stateManager.load", "Token");
            if (localToken != null)
            {
                AuthenticationButtonText = "Log out";
            }
            else
            {
                AuthenticationButtonText = "Login";
            }
            StateHasChanged();
            AuthenticationTextSet = true;
        }
    }

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
